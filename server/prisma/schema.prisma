// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @unique @default(uuid())
  email     String    @unique
  name      String?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  cart      Cart? // One-to-one relationship with Cart
  comments  Comment[]
}

model Admin {
  id String @id @unique @default(uuid())

  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String     @id @unique @default(uuid())
  title       String
  description String?
  price       Int
  imgUrl      String?
  cartItems   CartItem[]
  comments    Comment[]
}

model Purchase {
  id     String      @id @unique @default(uuid())
  status PaymentType @default(PENDING)
}

model Cart {
  id        String     @id @unique @default(uuid())
  userId    String     @unique // Each user has one cart
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[] // Many-to-many relationship through CartItem
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @unique @default(uuid())
  cartId    String // Foreign key for Cart
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String // Foreign key for Product
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1) // Tracks how many of this product is in the cart
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @unique @default(uuid())
  comment   String
  createdAt DateTime @default(now())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

enum PaymentType {
  PENDING
  INPROCESS
  SUCCESSFULL
}
